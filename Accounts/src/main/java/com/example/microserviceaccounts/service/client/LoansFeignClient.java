package com.example.microserviceaccounts.service.client;

import com.example.microserviceaccounts.dto.CardsDto;
import com.example.microserviceaccounts.dto.LoansDto;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestParam;

/**
 * Behind the scenes, my cards FeignClient will connect with the Eureka Server and try to fetch all the instances that are registered with the logical name cards
 * Once it receives 1 or 2 or any other instance details, it will try to cache those details for 30s (default period).
 * Within these 30s it is not going to connect again with the Eureka Server, but instead it is going to leverage the details present inside the cache.
 * All the implementation code will be generated by the open feign client (like Spring Repository)
 */
@FeignClient("loans")
public interface LoansFeignClient {

    /**
     * can choose whatever name inside this FeignClient interface, but please make sure the method signature like input parameters,
     * return parameters along with the method access type should be same as what we have defined inside the actual microservice.
     * @param mobileNumber
     * @return
     */
    @GetMapping(value = "/api/ms-fetch", consumes = "application/json")
    ResponseEntity<LoansDto> fetchLoanDetails(@RequestHeader("easybank-correlation-id") String correlationId,
                                              @RequestParam String mobileNumber);
}
