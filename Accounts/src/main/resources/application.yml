server:
  port: 8080
spring:
  application:
    name: "accounts"
  profiles:
    active: "prod"
  datasource:
    url: jdbc:mysql://localhost:3306/accountsdb
    username: root
    password: root
    driver-class-name: com.mysql.cj.jdbc.Driver
# always try to execute the scripts that I have mentioned inside the schema.sql
  sql:
    init:
      mode: always
  jpa:
    show-sql: true
  config:
#    configserver prefix is an indication to account microservices or any other spring boot application that it is going to connect with the config server.
#   optional what are telling to the accounts microservice is, if it is not able to connect with the config server for whatever reason, it can still continue to start the microservice application.
    import: "optional:configserver:http://localhost:8071/"
#  config:
#    import:
#      - "application_qa.yml"
#      - "application_prod.yml"
#  profiles:
#    active:
#      - "prod"
#build:
#  version: "3.0"
#
#accounts:
#  message: "Welcome to EasyBank accounts related local APIs"
#  contactDetails:
#    name" : "Bao Nguyen"
#    email: "nguyenducbaokey@gmail.com"
#  onCallSupport:
#    - (+84) 788 049 042
#    - (+84) 123 456 789
  rabbitmq:
    host: "localhost"
    port: 5672
    stream:
      username: "guest"
      password: "guest"
#      enable circuitbreaker
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true

management:
  endpoints:
    web:
      exposure:
        # spring boot actuator will enable and expose all management endpoint and inside these endpoints only we are also going to have refresh related endpoint.
        include: "*"
  # enable the environment info related information is used for the Eureka dashboard
  info:
    env:
      enabled: true
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  # enable an actuator URL which will allow me to shut down my accounts service gracefully.
  endpoint:
    shutdown:
      enabled: true
    health:
      probes:
        enabled: true
#        groups all metrics related to the microservice under the application name
  metrics:
    tags:
      application: ${spring.application.name}

# expose shutdown api
#endpoints:
#  shutdown:
#    enabled: true

eureka:
  instance:
    # by default, it will try to register with the host name. The hostnames will make sense whenever you are trying to use DNS mappings inside your microservices.
    # but inside our local system, we don't have any DNS mapping set up. We should use prefer IP address as true so my accounts microservice will register with my Eureka server by using the IP address.
    preferIpAddress : true
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: "http://localhost:8070/eureka/"

# information that is going to be displayed inside the Eureka dashboard
info:
  app:
    name: "accounts"
    description: "Easy Bank Accounts Application"
    version: "1.0.0"


logging:
  level:
    com:
      example:
        microserviceaccounts: DEBUG
  pattern:
#    five characters for some log severity (info, warn, error)
    # after the tag information, convey to my spring boot framework at runtime Open Telemetry library is going to generate the trace ID with the context information.
    level: "%5p [${spring.application.name},%X{traceId},%X{spanId}]"


resilience4j:
  circuitbreaker:
    configs:
      default:
        sliding-window-size: 10
        permitted-number-of-calls-in-half-open-state: 2
        failure-rate-threshold: 50
        wait-duration-in-open-state: 10000
  retry:
    configs:
      default:
#        try to retry 3 times before go to the callback method.
        max-attempts: 3
        wait-duration: 1000
        enable-exponential-backoff: true
#       backoff factor
        exponential-backoff-multiplier: 2
#        don't retry the request, it throws the below exceptions.
#        but it still runs the callback method.
#        ignore-exceptions:
#          - java.lang.NullPointerException
#        the retry will happen only for these kinds of exceptions, all the remaining exceptions will be ignored by the resilience4j. Don't have to mention ignore-exceptions above.
        retry-exceptions:
          - java.util.concurrent.TimeoutException
  ratelimiter:
#    for all apis.
#    default:
#      #        defines the time interval after which the system will refresh the quota (bucket).
#      limit-refresh-period: 5000
#      #        for every 5 seconds above, only one request will be allowed.
#      limit-for-period: 1
#      #        the maximum time that a particular thread can wait for the new refresh period to arrive with the new quota. (the thread is going to wait for a maximum of 1 second)
#      timeout-duration: 1000
    instances:
      getJavaVersion:
        #        defines the time interval after which the system will refresh the quota (bucket).
        limit-refresh-period: 5000
        #        for every 5 seconds above, only one request will be allowed.
        limit-for-period: 1
        #        the maximum time that a particular thread can wait for the new refresh period to arrive with the new quota. (the thread is going to wait for a maximum of 1 second)
        timeout-duration: 1000