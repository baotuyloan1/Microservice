server:
  port: 8090
spring:
  application:
    name: "loans"
  profiles:
    active: "prod"
  datasource:
    url: jdbc:mysql://localhost:3307/loansdb
    username: root
    password: root
    driver-class-name: com.mysql.cj.jdbc.Driver
  # always try to execute the scripts that I have mentioned inside the schema.sql
  sql:
    init:
      mode: always
  jpa:
    show-sql: true
  config:
    import: "optional:configserver:http://localhost:8071/"
  #    import:
#      - "application_qa.yml"
#      - "application_prod.yml"
#build:
#  version: "3.0"
#
#loans:
#  message: "Welcome to EasyBank loans related local APIs"
#  contactDetails:
#    name" : "Bao Nguyen"
#    email: "nguyenducbaokey@gmail.com"
#  onCallSupport:
#    - (+84) 788 049 042
#    - (+84) 123 456 789
  rabbitmq:
    host: "localhost"
    port: 5672
    stream:
      username: "guest"
      password: "guest"


management:
  endpoints:
    web:
      exposure:
        # spring boot actuator will enable and expose all management endpoint and inside these endpoints only we are also going to have refresh related endpoint.
        include: "*"
  # enable the environment info related information is used for the Eureka dashboard
  info:
    env:
      enabled: true
  # enable an actuator URL which will allow me to shut down my accounts service gracefully.
  endpoint:
    shutdown:
      enabled: true
    health:
      probes:
        enabled: true
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
    #        groups all metrics related to the microservice under the application name
  metrics:
    tags:
      application: ${spring.application.name}

# expose shutdown api
#endpoints:
#  shutdown:
#    enabled: true

eureka:
  instance:
    # by default, it will try to register with the host name. The hostnames will make sense whenever you are trying to use DNS mappings inside your microservices.
    # but inside our local system, we don't have any DNS mapping set up. We should use prefer IP address as true so my accounts microservice will register with my Eureka server by using the IP address.
    preferIpAddress : true
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/

# information that is going to be displayed inside the Eureka dashboard
info:
  app:
    name: "Loans"
    description: "Easy Bank Loans Application"
    version: "1.0.0"


logging:
  level:
    com:
      microservice:
        loans: DEBUG
  pattern:
    #    five characters for some log severity (info, warn, error)
    # after the tag information, convey to my spring boot framework at runtime Open Telemetry library is going to generate the trace ID with the context information.
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"