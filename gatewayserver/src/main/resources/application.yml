spring:
  application:
    name: "gatewayserver"
  config:
    import: "optional:configserver:http://localhost:8071/"
  cloud:
#    connect with the discovery server which is Eureka server
    gateway:
      discovery:
#        locate all the details about the microservices.
        locator:
#          if it is true, the default URL that the external client calls will be like this http://localhost:8072/accounts/api/...
#          if it is false, the default URL will be disabled. (when we use custom URL, the default URL should be disabled. [RouteLocator easyBankRouteConfig])
          enabled: false
          serviceId: "cards"
          # Accept the service name with the completely lowercase. (when call API, the service name will be in lowercase)
          lower-case-service-id: true
      httpclient:
        # use this configuration if we don't use circuit breaker. This global configuration will be ignored and whatever configurations specific to circuit breaker will be followed
        connect-timeout: 1000
        response-timeout: 10s
#        Rate limiter pattern using redis
  data:
    redis:
      connect-timeout: 2s
      host: localhost
      port: 6379
      timeout: 1s
  #build:
  #  version: "3.0"
  #
  #cards:
  #  message: "Welcome to EasyBank cards related local APIs"
  #  contactDetails:
  #    name" : "Bao Nguyen"
  #    email: "nguyenducbaokey@gmail.com"
  #  onCallSupport:
  #    - (+84) 788 049 042
  #    - (+84) 123 456 789
  rabbitmq:
    host: "localhost"
    port: 5672
    stream:
      username: "guest"
      password: "guest"

management:
  endpoints:
    web:
      exposure:
        # spring boot actuator will enable and expose all management endpoint and inside these endpoints only we are also going to have refresh related endpoint.
        include: "*"
  # enable the environment info related information is used for the Eureka dashboard
  info:
    env:
      enabled: true
  endpoint:
    gateway:
      enabled: true
    #        groups all metrics related to the microservice under the application name
  metrics:
    tags:
      application: ${spring.application.name}



# information that is going to be displayed inside the Eureka dashboard
info:
  app:
    name: "gatewayserver"
    description: "Easy Bank Gateway Server Application"
    version: "1.0.0"

logging:
  level:
    com:
      baond:
        gatewayserver: DEBUG
  pattern:
    #    five characters for some log severity (info, warn, error)
    # after the tag information, convey to my spring boot framework at runtime Open Telemetry library is going to generate the trace ID with the context information.
    level: "%5p [${spring.application.name},%X{traceId},%X{spanId}]"


resilience4j:
#  timelimiter:
#    configs:
##      use this configuration if we already defined circuit breaker in GatewayServerApplication, and the configuration httpclient.response-timeout will be ignored.
#      accountsCircuitBreaker:
#        timeout-duration: 5s
#        cancel-running-future: false
  circuitbreaker:
    configs:
      #    By using the default, that means these properties are applicable to all kinds of circuit breakers that you are going to create inside the microservices.
      #    replace the CircuitBreaker name which is defined the circuitBreaker ... setName("accountsCircuitBreaker")
      accountsCircuitBreaker:
        #      how many requests it has to initially monitor before it tries to change the status from close to open. In other words, at least 10 requests coming towards the accounts microservice.
        #      after monitoring 10 requests, you can take the decision whether to continue with the close status or to move to the open status.
        slidingWindowSize: 10
        #     The number of requests that are allowed in the half-open state. Based upon how these two requests are processed, it can decide whether to go back to the open state or move to the closed state.
        permittedNumberOfCallsInHalfOpenState: 2
        #      if at least 50% of my requests are failed, then my circuit breaker pattern can move to the open state from the close state
        failureRateThreshold: 50
        #      The circuit breaker pattern going to wait 10 seconds (block all requests) to the microservice and response immediately. After 10 seconds, it will try to move to the half-open state from the open state.
        waitDurationInOpenState: 10000
